{"ast":null,"code":"import cors from \"../cors\";\nimport { FactoryLogic } from \"radiotrasmitter/RadioTransmitter/dist/logic/FactoryLogic\";\nimport { Program } from \"radiotrasmitter/RadioTransmitter/dist/shared/entityshared/Program\";\nexport default async function (req, res) {\n  if (req.method === \"GET\") {\n    await cors(req, res);\n    const list = await FactoryLogic.getLogicProgram().getPrograms();\n    res.send(list);\n  }\n\n  if (req.method === \"POST\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      const dtprogram = new Program(data.name, data.producer, data.type, data.price);\n      await FactoryLogic.getLogicProgram().addProgram(dtprogram);\n      return res.status(200).json({\n        status: \"Success\"\n      });\n    } catch (error) {\n      return res.status(500).json({\n        status: \"Error\",\n        data: {\n          msg: \"Could not add program\",\n          error: error.toString()\n        }\n      });\n    }\n  }\n\n  if (req.method === \"PUT\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      const dtprogram = new Program(data.name, data.producer, data.type, data.price);\n      await FactoryLogic.getLogicProgram().updateProgram(dtprogram);\n      return res.status(200).json({\n        status: \"Success\"\n      });\n    } catch (error) {\n      return res.status(500).json({\n        status: \"Error\",\n        data: {\n          msg: \"Could not update program\",\n          error: error.toString()\n        }\n      });\n    }\n  }\n\n  if (req.method === \"DELETE\") {\n    await cors(req, res);\n    const data = req.body;\n\n    try {\n      const dtprogram = new Program(data.name, \" \", \" \", 0);\n      await FactoryLogic.getLogicProgram().deleteProgram(dtprogram);\n      return res.status(200).json({\n        status: \"Success\"\n      });\n    } catch (error) {\n      return res.status(500).json({\n        status: \"Error\",\n        data: {\n          error: error.toString()\n        }\n      });\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Waldemar/Desktop/APINextRadiotrasmitter/pages/api/program/program.js"],"names":["cors","FactoryLogic","Program","req","res","method","list","getLogicProgram","getPrograms","send","data","body","dtprogram","name","producer","type","price","addProgram","status","json","error","msg","toString","updateProgram","deleteProgram"],"mappings":"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","sourcesContent":["import cors from \"../cors\";\r\nimport {FactoryLogic} from \"radiotrasmitter/RadioTransmitter/dist/logic/FactoryLogic\";\r\nimport {Program} from \"radiotrasmitter/RadioTransmitter/dist/shared/entityshared/Program\";\r\n\r\nexport default async function (req, res) {\r\n  if(req.method===\"GET\")\r\n  {\r\n    await cors(req, res)\r\n    const list=await FactoryLogic.getLogicProgram().getPrograms();\r\n    res.send(list);\r\n  }\r\n\r\n  if(req.method===\"POST\")\r\n  {\r\n    await cors(req, res)\r\n    try\r\n    {\r\n    const data = req.body;\r\n    const dtprogram=new Program(data.name,data.producer,data.type,data.price);\r\n    await FactoryLogic.getLogicProgram().addProgram(dtprogram);\r\n    return res.status(200).json({ status: \"Success\" });\r\n    }\r\n    catch (error) {\r\n      return res.status(500).json({\r\n        status: \"Error\",\r\n        data: { msg: \"Could not add program\", error: error.toString() }\r\n      });\r\n    }\r\n  }\r\n  if(req.method===\"PUT\")\r\n  {\r\n    await cors(req, res)\r\n    try\r\n    {\r\n    const data = req.body;\r\n    const dtprogram=new Program(data.name,data.producer,data.type,data.price);\r\n   await FactoryLogic.getLogicProgram().updateProgram(dtprogram);\r\n    return res.status(200).json({ status: \"Success\" });\r\n    }\r\n    catch (error) {\r\n      return res.status(500).json({\r\n        status: \"Error\",\r\n        data: { msg: \"Could not update program\", error:error.toString() }\r\n      });\r\n    }\r\n  }\r\n  if(req.method===\"DELETE\")\r\n  {\r\n    await cors(req, res);\r\n    const data = req.body;\r\n    try\r\n    {  \r\n        const dtprogram=new Program(data.name,\" \",\" \",0);\r\n        await FactoryLogic.getLogicProgram().deleteProgram(dtprogram);\r\n    return res.status(200).json({ status: \"Success\" });\r\n    }\r\n    catch (error) {\r\n      return res.status(500).json({\r\n        status: \"Error\",\r\n        data: {  error: error.toString() }\r\n      });\r\n    }\r\n  }\r\n  }\r\n\r\n  "]},"metadata":{},"sourceType":"module"}