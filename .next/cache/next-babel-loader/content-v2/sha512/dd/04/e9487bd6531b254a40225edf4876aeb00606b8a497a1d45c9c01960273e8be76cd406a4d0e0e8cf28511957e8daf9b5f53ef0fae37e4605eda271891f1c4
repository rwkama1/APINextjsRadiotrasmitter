{"ast":null,"code":"import cors from \"../cors\";\nimport { FactoryLogic } from \"radiotrasmitter/RadioTransmitter/dist/logic/FactoryLogic\";\nexport default async function (req, res) {\n  if (req.method === \"GET\") {\n    await cors(req, res);\n    const list = await FactoryLogic.getLogicAdvertiser().getAdvertisers();\n    res.send(list);\n  }\n\n  if (req.method === \"POST\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      var dtproduct = new Product(data.barcode, data.name, data.price);\n      const addproduct = await DProduct.getInstance().addProduct(dtproduct);\n      return res.status(200).json({\n        status: \"Success\"\n      });\n    } catch (error) {\n      return res.status(500).json({\n        status: \"Error\",\n        data: {\n          msg: \"Could not add product\",\n          error\n        }\n      });\n    }\n  }\n\n  if (req.method === \"PUT\") {\n    await cors(req, res);\n\n    try {\n      const data = req.body;\n      var dtproduct = new Product(data.barcode, data.name, data.price);\n      const updprod = await DProduct.getInstance().updateProduct(dtproduct);\n      return res.status(200).json({\n        status: \"Success\"\n      });\n    } catch (error) {\n      return res.status(500).json({\n        status: \"Error\",\n        data: {\n          msg: \"Could not update product\",\n          error\n        }\n      });\n    }\n  }\n\n  if (req.method === \"DELETE\") {\n    await cors(req, res);\n    const {\n      barcode\n    } = req.query;\n\n    try {\n      var dtproduct = new Product(barcode, \"\", 0);\n      const delprod = await DProduct.getInstance().deleteProduct(dtproduct);\n      return res.status(200).json({\n        status: \"Success\"\n      });\n    } catch (error) {\n      return res.status(500).json({\n        status: \"Error\",\n        data: {\n          msg: \"Could not delete product\",\n          error\n        }\n      });\n    }\n  }\n} // export  async  function  getProduct(req, res) {\n//   const { pbarcode } = req.query;\n//   await cors(req, res)\n//     const product=await DProduct.getInstance().getproduct(pbarcode);\n//     res.json(product);\n// }","map":{"version":3,"sources":["C:/Users/Waldemar/Desktop/APINextRadiotrasmitter/pages/api/advertiser/advertiser.js"],"names":["cors","FactoryLogic","req","res","method","list","getLogicAdvertiser","getAdvertisers","send","data","body","dtproduct","Product","barcode","name","price","addproduct","DProduct","getInstance","addProduct","status","json","error","msg","updprod","updateProduct","query","delprod","deleteProduct"],"mappings":"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","sourcesContent":["import cors from \"../cors\";\r\nimport {FactoryLogic} from \"radiotrasmitter/RadioTransmitter/dist/logic/FactoryLogic\";\r\n\r\n\r\nexport default async function (req, res) {\r\n  if(req.method===\"GET\")\r\n  {\r\n    await cors(req, res)\r\n    const list=await FactoryLogic.getLogicAdvertiser().getAdvertisers();\r\n    res.send(list);\r\n  }\r\n  if(req.method===\"POST\")\r\n  {\r\n    await cors(req, res)\r\n    try\r\n    {\r\n    const data = req.body;\r\n    var dtproduct=new Product(data.barcode, data.name,data.price);\r\n    \r\n    const addproduct=await DProduct.getInstance().addProduct(dtproduct);\r\n    return res.status(200).json({ status: \"Success\" });\r\n    }\r\n    catch (error) {\r\n      return res.status(500).json({\r\n        status: \"Error\",\r\n        data: { msg: \"Could not add product\", error }\r\n      });\r\n    }\r\n  }\r\n  if(req.method===\"PUT\")\r\n  {\r\n    await cors(req, res)\r\n    try\r\n    {\r\n    const data = req.body;\r\n    var dtproduct=new Product(data.barcode, data.name,data.price);\r\n    const updprod=await DProduct.getInstance().updateProduct(dtproduct);\r\n    return res.status(200).json({ status: \"Success\" });\r\n    }\r\n    catch (error) {\r\n      return res.status(500).json({\r\n        status: \"Error\",\r\n        data: { msg: \"Could not update product\", error }\r\n      });\r\n    }\r\n  }\r\n  if(req.method===\"DELETE\")\r\n  {\r\n    await cors(req, res);\r\n    const { barcode } = req.query;\r\n    try\r\n    {\r\n    var dtproduct=new Product(barcode, \"\",0);\r\n    const delprod=await DProduct.getInstance().deleteProduct(dtproduct);\r\n    return res.status(200).json({ status: \"Success\" });\r\n    }\r\n    catch (error) {\r\n      return res.status(500).json({\r\n        status: \"Error\",\r\n        data: { msg: \"Could not delete product\", error }\r\n      });\r\n    }\r\n  }\r\n  }\r\n  // export  async  function  getProduct(req, res) {\r\n  //   const { pbarcode } = req.query;\r\n  //   await cors(req, res)\r\n  //     const product=await DProduct.getInstance().getproduct(pbarcode);\r\n  //     res.json(product);\r\n  // }\r\n  "]},"metadata":{},"sourceType":"module"}